#include "sumovore.h"
#include "motor_control.h"
#include <xc.h>

void follow_simple_curves(void);
void spin_left(void);// 
void turn_left(void);//
void straight_fwd(void);// this needs balancing
void turn_right(void);
void spin_right(void);
void cross_whitespace(void); // this works 
void spin_left_slow(void);
void turn_left_slow(void);
void turn_left_90(void);
void turn_right_90(void);
void spin_right_slow(void);
void find_track(void);
void reverse(void);
void landing_pad(void);
void cross_whitespace(void);
void SetSensorsSetLed(void);
//Added
void accuteLeftTurn();
void accuteRightTurn();

void motor_control(void)
{	
    //sets variables used in the for loops in the cases
    int j = 0;
    int i = 0;
	// very simple motor control
    
    //sets timer used in the cases
    OpenTimer0(TIMER_INT_OFF & T0_SOURCE_INT & T0_16BIT & T0_PS_1_256);
  	switch(SeeLine.B)
   	{
		 //Case for when the robot detects center. On a track, this would 
        //generally be a straight line, where the robot would execute the
        //straight_fwd() function. 
        case 0b00100u:
        //This case is for when the robot is following a right curve, and also 
        //for correcting itself when the robot starts veering off to the left
        //when it is on a straight line.
        case 0b00010u:    
        //This case is also for when the robot is following a right curve.
        case 0b00110u:      
        //This case is for when the robot is following a left curve, and also 
        //for correcting itself when the robot starts veering off to the right
        //when it is on a straight line.
        case 0b01000u:      
        //This case is also for when the robot is following a left curve.    
        case 0b01100u:
        //This case is a last resort case where the robot is either veering off 
        //too much to the left or simply following a right curve.
        case 0b00001u:
        //This case is a last resort case where the robot is either veering off 
        //too much to the right or simply following a left curve.
         case 0b10000u:
                        follow_simple_curves();       //combined simple curves with new speeds from 2.0.
                        break;                        
 //NOTE: be aware what binary that simple curves now take, so later inputs should be different
//Accute left turn added Brandon
        
        case 0b10100u:
        accuteLeftTurn();
        break;
        
        case 0b00101u:
            accuteRightTurn();
            break;
        
        
		default: break;
  	} 

	//***************************************************************
	// ROBOT DANCES		    										*
	//***************************************************************
	//turn_left();		//Spin around one wheel

	//spin_left();		//Spin at one place

	//set_motor_speed(left, slow, 0); 
  	//set_motor_speed(right, fast, 0);	//Spin in larger circles
	//***************************************************************
}

//For following straight lines and slow curves
void follow_simple_curves(void)        
{
     if ( SeeLine.b.Center ) straight_fwd();
     else if (SeeLine.b.Left) spin_left();
     else if (SeeLine.b.CntLeft) spin_left_slow();
     else if (SeeLine.b.CntRight) spin_right_slow();
     else if (SeeLine.b.Right) spin_right();
     else if (SeeLine.b.CntRight && SeeLine.b.Center) turn_right();
     else if (SeeLine.b.CntLeft && SeeLine.b.Center) turn_left();
}


void reverse(void)
{
  set_motor_speed(left, rev_slow, 5); 
  set_motor_speed(right, rev_slow,8);    
}
void spin_left(void)
{
  set_motor_speed(left, rev_medium, 5); 
  set_motor_speed(right, medium, 8); 
}
void spin_left_slow(void)
{
  set_motor_speed(left, rev_slow, 5); 
  set_motor_speed(right, slow, 8); 
}
void turn_left(void)
{
  set_motor_speed(left, slow, 5); 
  set_motor_speed(right, medium, 8);  
}
void turn_left_slow(void)
{
    set_motor_speed(left, stop, 5);
    set_motor_speed(right, slow, 8);
}
void turn_left_90(void)
{
  set_motor_speed(left, rev_slow, 5); 
  set_motor_speed(right, slow, 8);  
}
void straight_fwd(void)
{
  set_motor_speed(left, slow, 5); 
  set_motor_speed(right, slow, 8);     
}
void spin_right(void)
{
  set_motor_speed(left, medium, 5); 
  set_motor_speed(right, rev_medium, 8);  
}
void spin_right_slow(void)
{
   set_motor_speed(left, slow, 5); 
   set_motor_speed(right, rev_slow, 8); 
}
void turn_right(void)
{
  set_motor_speed(left, medium, 5); 
  set_motor_speed(right, slow, 8);  
}
void turn_right_90(void)
{
  set_motor_speed(left, slow, 5); 
  set_motor_speed(right, rev_slow, 8); 
}
void SetSensorSetLed(void)
{
  check_sensors(); 
  set_leds();  
}

//Added by brandon
void accuteLeftTurn(void)
{
    while (SeeLine.B == 0b10100u)
        {
            check_sensors();
            SetSensorSetLed();
            straight_fwd();
    if(SeeLine.B == 0b01100u || SeeLine.B == 0b11100u)
        {
      check_sensors();
      SetSensorSetLed();
      while(SeeLine.B != 0b00000)
        {
            straight_fwd();
            check_sensors();
            SetSensorSetLed();
        }
   if (SeeLine.B == 0b00000)
       {
            spin_left_slow();
            check_sensors();
            SetSensorSetLed();
   if (SeeLine.B == 0b00100)
        {
            straight_fwd();
        }
        }

    }
}
}

void accuteRightTurn(void)
{
    while (SeeLine.B == 0b00101u)
    {
        check_sensors();
        SetSensorSetLed();
        straight_fwd();
    if(SeeLine.B == 0b00110u || SeeLine.B == 0b00111u)
       {
            check_sensors();
             SetSensorSetLed();
    while(SeeLine.B != 0b00000)
        {
            straight_fwd();
            check_sensors();
            SetSensorSetLed();
        }
    if (SeeLine.B == 0b00000)
        {
            spin_right_slow();
            check_sensors();
            SetSensorSetLed();
    if (SeeLine.B == 0b00100)
        {
            straight_fwd();
        }
        }

        }
    }
}
