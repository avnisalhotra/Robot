#include "../Common/sumovore.h"
#include "../Common/motor_control.h"
#include <xc.h>

void follow_simple_curves(void);
void spin_left(void);// 
void turn_left(void);//
void straight_fwd(void);// this needs balancing
void turn_right(void);
void spin_right(void);
void spin_left_slow(void);
void turn_left_slow(void);
void turn_right_slow(void);
void turn_left_90(void);
void turn_right_90(void);
void spin_right_slow(void);
void reverse(void);
void find_track(void);
void CheckSensorsSetLed(void);
void accuteLeftTurn(void);
void accuteRightTurn(void);
void landing_pad(void);
void spin_180(void);
void follow_corners(void); 
void follow_sharp_corners(void);
void sharp_left(void);
void sharp_right(void);
void sharp_angle_left(void);
void sharp_angle_right(void);

void motor_control(void)
{	
    //sets variables used in the for loops in the cases
    int j = 0;
    int i = 0;
    
	// very simple motor control
    
    //sets timer used in the cases
    OpenTimer0(TIMER_INT_OFF & T0_SOURCE_INT & T0_16BIT & T0_PS_1_256);
    
  	switch(SeeLine.B)
   	{
		 //Case for when the robot detects center. On a track, this would 
        //generally be a straight line, where the robot would execute the
        //straight_fwd() function. 
        case 0b00100u:
        //This case is for when the robot is following a right curve, and also 
        //for correcting itself when the robot starts veering off to the left
        //when it is on a straight line.
        case 0b00010u:    
        //This case is also for when the robot is following a right curve.
        //case 0b00110u:      
        //This case is for when the robot is following a left curve, and also 
        //for correcting itself when the robot starts veering off to the right
        //when it is on a straight line.
        case 0b01000u:      
        //This case is also for when the robot is following a left curve.    
        //case 0b01100u:
        //This case is a last resort case where the robot is either veering off 
        //too much to the left or simply following a right curve.
        case 0b00001u:
        //This case is a last resort case where the robot is either veering off 
        //too much to the right or simply following a left curve.
        case 0b10000u:
                        follow_simple_curves();       //combined simple curves with new speeds from 2.0.
                        break;                        
 //NOTE: be aware what binary that simple curves now take, so later inputs should be different
        case 0b00000u:  
                        find_track();
                        break;
        case 0b10100u:  
                        accuteLeftTurn();
                        break;
        case 0b00101u:  
                        accuteRightTurn();
                        break;
        case 0b11100u:
		case 0b00111u:
		case 0b11000u:
		case 0b00011u:
                       //no breaks all above readings end up here
                       follow_corners();		//call function for corners, Sharp turns (>90 deg)
                       break;
       
        case 0b01101u:
        case 0b10110u:    
                       follow_sharp_corners();		//call function for corners
                       break;               
                        
        case 0b11111u:  
                        landing_pad();
                        break;    
		default:        break;
  	} 

	//***************************************************************
	// ROBOT DANCES		    										*
	//***************************************************************
	//turn_left();		//Spin around one wheel

	//spin_left();		//Spin at one place

	//set_motor_speed(left, slow, 0); 
  	//set_motor_speed(right, fast, 0);	//Spin in larger circles
	//***************************************************************
}

//For following straight lines and slow curves
void follow_simple_curves(void)        
{
     if ( SeeLine.b.Center ) straight_fwd();
     else if (SeeLine.b.CntLeft) spin_left_slow();
     else if (SeeLine.b.CntRight) spin_right_slow();
     else if (SeeLine.b.Right) spin_right();
     else if (SeeLine.b.Left) spin_left();
     //else if (SeeLine.b.CntRight && SeeLine.b.Center) turn_right();
     //else if (SeeLine.b.CntLeft && SeeLine.b.Center) turn_left();
}

void CheckSensorsSetLed(void)
{
  check_sensors(); 
  set_leds();  
}

void accuteLeftTurn(void)
{
 while (SeeLine.B == 0b10100u)
 {
  check_sensors();
  CheckSensorsSetLed();
  straight_fwd();
  if(SeeLine.B == 0b01100u || SeeLine.B == 0b11100u)
  {
    check_sensors();
    CheckSensorsSetLed();
    while(SeeLine.B != 0b00000u)
    {
     straight_fwd();
     check_sensors();
     CheckSensorsSetLed();
     if (SeeLine.B == 0b00000u)
     {
     spin_left();
     check_sensors();
     CheckSensorsSetLed();
     if (SeeLine.B == 0b00100u)
       {
         return;
       }
     }
    }
   }
 }
}

void accuteRightTurn(void)
{
while (SeeLine.B == 0b00101u)
 {
 check_sensors();
 CheckSensorsSetLed();
 straight_fwd();
 if(SeeLine.B == 0b00110u || SeeLine.B == 0b00111u)
  {
    check_sensors();
    CheckSensorsSetLed();
    while(SeeLine.B != 0b00000u)
     {
      straight_fwd();
      check_sensors();
      CheckSensorsSetLed();
       if (SeeLine.B == 0b00000u)
       {
         spin_right();
         check_sensors();
         CheckSensorsSetLed();
         if (SeeLine.B == 0b00100u)
          {
           return;
          }
       }
    
     }

   }
 }
}


void landing_pad(void)
{
    TMR0IF = 0;
    WriteTimer0(0);
    while (ReadTimer0() < 15639 && SeeLine.B == 0b11111u) //give bot 0.5 sec to go straight while seeing black
    {
        straight_fwd(); 
        CheckSensorsSetLed();
    }
   CheckSensorsSetLed();
   if (ReadTimer0() > 15639 && SeeLine.B == 0b11111u)
    {
        motors_brake_all();
        while(1);
    } 
   else return;
}

 void find_track(void)
{
   unsigned int wait_TCY = 21875; // amount of tcy to wait for timer0
   while(SeeLine.B == 0b00000u )
 {
    TMR0IF = 0;
    WriteTimer0(0);
    //256*21875*TCY = 0.7 seconds
    while( ReadTimer0() < wait_TCY && SeeLine.B == 0b00000u)
   {
       CheckSensorsSetLed();
       if (SeeLine.b.Center||SeeLine.b.CntLeft||SeeLine.b.CntRight||SeeLine.b.Left||SeeLine.b.Right)
       {
           follow_simple_curves();
           CheckSensorsSetLed();
           TMR0IF = 1;
       }
   }
   CheckSensorsSetLed();
   
   if(SeeLine.B == 0b10000u || SeeLine.B == 0b11000u)
   { 
        straight_fwd();
        _delay(100000);
        _delay(100000);
        _delay(100000);
        spin_right();
   }
   if(SeeLine.B == 0b00001u || SeeLine.B == 0b00011u)
   { 
        straight_fwd();
        _delay(100000);
        _delay(100000);
        _delay(100000);
        spin_left();
   }
   TMR0IF = 0;
   WriteTimer0(0);
 while( ReadTimer0() > wait_TCY && SeeLine.B == 0b00000u)
    {
      do 
        {
            reverse();
            CheckSensorsSetLed();
        }
        while(!SeeLine.b.Center && !SeeLine.b.CntLeft && !SeeLine.b.CntRight 
                    && !SeeLine.b.Left && !SeeLine.b.Right );

            TMR0IF = 0;
            WriteTimer0(46004u);
            while(!TMR0IF)
            {
                straight_fwd();    
                CheckSensorsSetLed();
            }
  
            TMR0IF = 0;
            WriteTimer0(43000u);
            while(!TMR0IF)
            {
                spin_left_slow(); 
                CheckSensorsSetLed();                
            }
            
    }
    
  }
 }   

void follow_corners(void) 
{   //For following turns of 90 degrees
	//Hitting perpendicular
	if 		(SeeLine.b.Center && SeeLine.b.Left && SeeLine.b.CntLeft) 
    {
        sharp_left();
        CheckSensorsSetLed();
    }
	else if (SeeLine.b.Center && SeeLine.b.Right && SeeLine.b.CntRight)
    {
        sharp_right();
        CheckSensorsSetLed();
    }
    
	//Hitting on a slight angle
	else if (SeeLine.b.Left && SeeLine.b.CntLeft)
        
    {
        sharp_left();	
        CheckSensorsSetLed();
    }
	else if (SeeLine.b.Right && SeeLine.b.CntRight) 
    {
        sharp_right();
        CheckSensorsSetLed();
    }
}
void follow_sharp_corners(void)
{
	if 		(SeeLine.b.Center && SeeLine.b.Left) 
    {
        sharp_angle_left();
        CheckSensorsSetLed();
    }
	else if (SeeLine.b.Center && SeeLine.b.Right) 
    {
        sharp_angle_right();
        CheckSensorsSetLed();
    }
	else if (SeeLine.b.Center && SeeLine.b.CntLeft && SeeLine.b.Right)
    {
        sharp_angle_right();
        CheckSensorsSetLed();
    }
	else if (SeeLine.b.Center && SeeLine.b.CntRight && SeeLine.b.Left)
    {
        sharp_angle_left();
    }
}
void sharp_left(void)
{
  	spin_left();
	//Check for line
	CheckSensorsSetLed();   // from sumovore.c
            // function from sumovore.c
	
	//While the robot has not completed the turn, keep spinning
	while(SeeLine.b.Center != 1)
	{
		//Check for line
		CheckSensorsSetLed();  // from sumovore.c
                 // function from sumovore.c
	}
}
void sharp_right(void)
{
	spin_right();
	//Check for line
	CheckSensorsSetLed(); // from sumovore.c
            // function from sumovore.c

	//While the robot has not completed the turn, keep spinning
	while(SeeLine.b.Center != 1)
	{
		//Check for line
		CheckSensorsSetLed();   // from sumovore.c
               // function from sumovore.c
	}
}
void sharp_angle_left(void)
{
	while(SeeLine.B != 0b00000u  && SeeLine.B != 0b00101u && SeeLine.B != 0b00100u)
	{
		straight_fwd();

		//Check for line
		CheckSensorsSetLed();    // from sumovore.c
    	         // function from sumovore.c
	}
	while(SeeLine.b.Center != 1)
	{
		spin_left();

		//Check for line
		CheckSensorsSetLed();   // from sumovore.c
    	       // function from sumovore.c
	}
}
void sharp_angle_right(void)
{
	while(SeeLine.B != 0b00000u && SeeLine.B != 0b10100u && SeeLine.B != 0b00100u)
	{
		straight_fwd();
		//Check for line
		CheckSensorsSetLed();   // from sumovore.c
    	        // function from sumovore.c
	}
	while(SeeLine.b.Center != 1)
	{	
		spin_right();

		//Check for line
		CheckSensorsSetLed();    // from sumovore.c
    	         // function from sumovore.c

	}
}
 
void reverse(void)
{
  set_motor_speed(left, rev_slow, 5); 
  set_motor_speed(right, rev_slow,8);    
}
void spin_left(void)
{
  set_motor_speed(left, rev_medium, 5); 
  set_motor_speed(right, medium, 8); 
}
void spin_left_slow(void)
{
  set_motor_speed(left, rev_slow, 5); 
  set_motor_speed(right, slow, 8); 
}
void turn_left(void)
{
  set_motor_speed(left, slow, 5); 
  set_motor_speed(right, medium, 8);  
}
void turn_left_slow(void)
{
    set_motor_speed(left, stop, 5);
    set_motor_speed(right, slow, 8);
}
void turn_right_slow(void)
{
    set_motor_speed(left, slow, 8);
    set_motor_speed(right, stop, 5);
}
void turn_left_90(void)
{
  set_motor_speed(left, rev_slow, 5); 
  set_motor_speed(right, slow, 8);  
}
void straight_fwd(void)
{
  set_motor_speed(left, slow, 5); 
  set_motor_speed(right, slow, 8);     
}
void spin_right(void)
{
  set_motor_speed(left, medium, 5); 
  set_motor_speed(right, rev_medium, 8);  
}
void spin_right_slow(void)
{
   set_motor_speed(left, slow, 5); 
   set_motor_speed(right, rev_slow, 8); 
}
void turn_right(void)
{
  set_motor_speed(left, medium, 5); 
  set_motor_speed(right, slow, 8);  
}
void turn_right_90(void)
{
  set_motor_speed(left, slow, 5); 
  set_motor_speed(right, rev_slow, 8); 
}

